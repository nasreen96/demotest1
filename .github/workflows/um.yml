# name: update-module-options-workflow

# on:
#   push:
#     branches: 
#       - ci/module-list

#   workflow_dispatch:
#     inputs:
#       yamlFilePath:
#         type: string
#         description: 'Path to the onboarding workflow YAML file (e.g., .github/workflows/onboarding-workflow.yml)'
#         required: true
#         default: '.github/workflows/onboarding-workflow.yml'

#       registryUrl:
#         type: string
#         description: 'URL of the MCR registry'
#         default: 'https://mcr.microsoft.com/v2'

#       moduleRepoPath:
#         type: string
#         description: 'Path to the module repository in the MCR registry'
#         default: 'bicep/avm/res'

#   schedule:
#     - cron: "0 0 * * *" # Runs daily at midnight UTC

# permissions:
#   id-token: write
#   contents: write
#   statuses: write
#   actions: write

# jobs:
#   update_onboarding_workflow:
#     runs-on: ubuntu-latest

#     steps:
#       # Step 1: Checkout the repository
#       - name: Checkout the repository
#         uses: actions/checkout@v3

#       # Step 2: Fetch Module List from MCR
#       - name: Fetch Module List
#         id: fetch_modules
#         run: |
#           pwsh ./utilities/tools/Get-ModuleListFromMcr.ps1 `
#             -RegistryUrl '${{ inputs.registryUrl }}' `
#             -ModuleRepoPath '${{ inputs.moduleRepoPath }}' `
#             > raw-module-list.txt
#         shell: pwsh

#       # Step 3: Format Module List
#       - name: Format Module List
#         id: format_modules
#         run: |
#           moduleList=$(cat raw-module-list.txt | jq -R -s 'split("\n") | map(select(length > 0))')
#           echo "::set-output name=moduleList::${moduleList}"
#         shell: bash

#       # Step 4: Update Onboarding Workflow
#       - name: Update Onboarding Workflow
#         id: update_workflow
#         run: |
#           pwsh ./utilities/tools/Add-ModulesToOnboardingWorkflow.ps1 `
#             -yamlFilePath '${{ inputs.yamlFilePath }}' `
#             -newOptions '${{ steps.format_modules.outputs.moduleList }}'
#         shell: pwsh

#       # # Step 5: Validate Updated YAML
#       # - name: Validate YAML File
#       #   run: |
#       #     yamllint '${{ inputs.yamlFilePath }}'
#       #   shell: bash
#        # Step 7: Generate App Token
#       - name: Generate App Token
#         uses: actions/create-github-app-token@v1
#         id: app-token
#         with:
#           app-id: ${{  vars.VERSION_BUMPER_APPID  }}
#           private-key: ${{ secrets.VERSION_BUMPER_SECRET }}

#       - name: Commit and Push Changes
#         env:
#            GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
#         run: |
#           git config user.name "github-actions"
#           git config user.email "github-actions@github.com"
#           git checkout -b ci/update-onboarding || git checkout ci/update-onboarding
#           git add .
#           git commit -m "Update onboarding workflow with new module options" || echo "No changes to commit"
#           git push origin ci/update-onboarding
#           git push --set-upstream origin ci/update-onboarding

#       - name: Create Pull Request
#         uses: peter-evans/create-pull-request@v4
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           branch: ci/update-onboarding
#           base: main
#           title: "Update Onboarding Workflow Module Options"
#           body: |
#             This PR updates the onboarding workflow with the latest module options fetched from the MCR registry.

      
#       # # Step 6: Commit and Push Changes
#       # - name: Commit and Push Changes
#       #   run: |
#       #     git config user.name "github-actions"
#       #     git config user.email "github-actions@github.com"
#       #     git add .
#       #     git commit -m "Update onboarding workflow with new module options" || echo "No changes to commit"
#       #     git push origin main
#       #   env:
#       #     GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

#       # # # Step 7: Create Pull Request
#       # # - name: Create Pull Request
#       # #   uses: peter-evans/create-pull-request@v4
#       # #   with:
#       # #     token: ${{ secrets.GITHUB_TOKEN }}
#       # #     branch: ci/module-list
#       # #     base: main
#       # #     title: "Update Onboarding Workflow Module Options"
#       # #     body: |
#       # #       This PR updates the onboarding workflow with the latest module options fetched from the MCR registry.

name: update-module-options-workflow

on:
  workflow_dispatch:
    inputs:
      yamlFilePath:
        type: string
        description: "Path to the onboarding workflow YAML file (e.g., ./testing/onboarding-workflow.yml)"
        required: true
        default: "testing/onboarding-workflow.yml"

      registryUrl:
        type: string
        description: "URL of the MCR registry"
        required: false
        default: "https://mcr.microsoft.com/v2"

      moduleRepoPath:
        type: string
        description: "Path to the module repository in the MCR registry"
        required: false
        default: "bicep/avm/res"

jobs:
  update_modules:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Set up Git
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Define inputs
      - name: Define inputs
        id: define_inputs
        shell: pwsh
        run: |
          $yamlFilePath = "${{ github.event.inputs.yamlFilePath }}"
          $registryUrl = "${{ github.event.inputs.registryUrl }}"
          $moduleRepoPath = "${{ github.event.inputs.moduleRepoPath }}"
          echo "::set-output name=yamlFilePath::$yamlFilePath"
          echo "::set-output name=registryUrl::$registryUrl"
          echo "::set-output name=moduleRepoPath::$moduleRepoPath"

      
      # # Step 3: Fetch module list from MCR
      # - name: Fetch module list from MCR
      #   id: fetch_modules
      #   run: |
      #     $modulelist = pwsh ./utilities/tools/Get-ModuleListFromMcr.ps1 -RegistryUrl '${{ steps.define_inputs.outputs.registryUrl }}' -ModuleRepoPath '${{ steps.define_inputs.outputs.moduleRepoPath }}'
      #     $updateworkflow = pwsh ./utilities/tools/Add-ModulesToOnboardingWorkflow.ps1 -yamlFilePath '${{ steps.define_inputs.outputs.yamlFilePath }}' -newOptions "$modulelist"
      #   shell: pwsh

      # Step 3: Fetch module list from MCR and update onboarding workflow
      - name: Fetch module list and update onboarding workflow
        id: fetch_and_update_workflow
        run: |
          $modulelist = pwsh ./utilities/tools/Get-ModuleListFromMcr.ps1 -RegistryUrl '${{ steps.define_inputs.outputs.registryUrl }}' -ModuleRepoPath '${{ steps.define_inputs.outputs.moduleRepoPath }}'
          $formattedModuleList = $modulelist | ForEach-Object { "- $_`n" } -join ""
          pwsh ./utilities/tools/Add-ModulesToOnboardingWorkflow.ps1 -yamlFilePath '${{ steps.define_inputs.outputs.yamlFilePath }}' -newOptions "$formattedModuleList"
        shell: pwsh


      # - name: Format module list
      #   id: format_modules
      #   run: |
      #     # Remove VERBOSE log lines
      #     grep -v '^VERBOSE' raw-module-list.txt > cleaned-module-list.txt
      
      #     # Remove ANSI escape codes
      #     sed -i 's/\x1b\[[0-9;]*[a-zA-Z]//g' cleaned-module-list.txt
      
      #     # Convert the cleaned output into a JSON array
      #     moduleList=$(cat cleaned-module-list.txt | jq -R -s 'split("\n") | map(select(length > 0))')
      
      #     # Set the formatted module list as an output
      #     echo "::set-output name=moduleList::$moduleList"
      #   shell: bash

      # - name: Format module list for YAML
      #   id: format_modules
      #   run: |
      #           # Remove VERBOSE log lines
      #           grep -v '^VERBOSE' raw-module-list.txt > cleaned-module-list.txt
            
      #           # Remove ANSI escape codes
      #           sed -i 's/\x1b\[[0-9;]*[a-zA-Z]//g' cleaned-module-list.txt
            
      #           # Convert the cleaned output to YAML-compatible format
      #           moduleList=$(cat cleaned-module-list.txt | jq -R -s 'split("\n") | map(select(length > 0)) | map("  - " + .) | join("\n")')
            
      #           # Set the output for further steps
      #           echo "::set-output name=moduleList::$moduleList"
      #   shell: bash


      # # Step 5: Update onboarding workflow
      # - name: Update onboarding workflow
      #   id: update_workflow
      #   run: |
      #     pwsh ./utilities/tools/Add-ModulesToOnboardingWorkflow.ps1 `
      #       -yamlFilePath '${{ steps.define_inputs.outputs.yamlFilePath }}' `
      #       -newOptions '${{ steps.format_modules.outputs.moduleList }}'
      #   shell: pwsh

      # # Step 6: Validate updated YAML
      # - name: Validate updated YAML
      #   run: |
      #     yamllint '${{ steps.define_inputs.outputs.yamlFilePath }}'
      #   shell: bash

      # Step 7: Create feature branch
      - name: Create feature branch
        shell: pwsh
        run: |
          git fetch origin
          git checkout -b ci/update-onboarding-test3 origin/main || git checkout ci/update-onboarding-test3

      # Step 8: Push changes to feature branch
      - name: Push changes to feature branch
        shell: pwsh
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@gtest.com"
          git add .
          git commit -m "Update onboarding workflow module options"
          git push origin ci/update-onboarding-test3

      # # Step 9: Create pull request
      # - name: Create pull request
      #   uses: peter-evans/create-pull-request@v4
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: ${{ steps.create_branch.outputs.branchName }}
      #     base: main
      #     title: "Update onboarding workflow module options"
          # body: "This PR updates the onboarding workflow with the latest module options fetched from the MCR registry."
