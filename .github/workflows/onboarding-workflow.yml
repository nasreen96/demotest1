name: onboarding-workflow

on:
  workflow_dispatch:
    inputs:
      module_path:
        type: choice
        description: "AVM Modules and version tags"
        required: true
        options:
          - network/network-security-group/0.5.0
          - storage/storage-account/0.14.3
          - network/private-endpoint/0.9.0
          - key-vault/vault/0.10.2
          - container-service/managed-cluster/0.5.1
          - db-for-postgre-sql/flexible-server/0.6.0
          - container-registry/registry/0.6.0
          - network/application-gateway/0.5.1
          - network/application-gateway-web-application-firewall-policy/0.1.1

      repository:
        description: "Source Repo: Azure/bicep-registry-modules"
        required: false
        default: "Azure/bicep-registry-modules"

jobs:
  onboard_modules:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Git
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Define inputs
        id: define_inputs
        shell: pwsh
        run: |
          $moduleInput = "${{ github.event.inputs.module_path }}"
          $moduleParts = $moduleInput -split '/'
          $moduleName = "$($moduleParts[0])/$($moduleParts[1])"
          $branchName = "$moduleInput"
          $version = $moduleParts[2]
          $repositoryInput = "${{ github.event.inputs.repository }}"
          $repositoryParts = $repositoryInput -split '/'
          $repository = "$($repositoryParts[0])/$($repositoryParts[1])"
          $brmFolderPath = $repositoryParts[1]
          echo "::set-output name=module_name::$moduleName"
          echo "::set-output name=branch_name::$branchName"
          echo "::set-output name=version::$version"
          echo "::set-output name=brmFolderPath::$brmFolderPath"

      - name: Create feature branch
        shell: pwsh
        run: |
          git checkout -b "${{ steps.define_inputs.outputs.branch_name }}" origin/main

      - name: Checkout external repository
        uses: actions/checkout@v4
        with:
          repository: "${{ github.event.inputs.repository }}"
          path: ${{ steps.define_inputs.outputs.brmFolderPath }}
          ref: "refs/tags/avm/res/${{ steps.define_inputs.outputs.module_name }}/${{ steps.define_inputs.outputs.version }}"

      - name: Copy module to new branch
        shell: pwsh
        run: |
          $moduleName = "${{ steps.define_inputs.outputs.module_name }}"
          $sourceDir = "${{ steps.define_inputs.outputs.brmFolderPath }}/avm/res/$moduleName"
          $branchName = "${{ steps.define_inputs.outputs.branch_name }}"
          $destDir = "elements/res/$moduleName"
          Write-Output "Copying module from: $sourceDir to: $destDir"
          if (-Not (Test-Path -Path $destDir)) { New-Item -ItemType Directory -Path $destDir }
          Copy-Item -Path "$sourceDir\*" -Destination "$destDir" -Recurse -Force

      - name: Clean up external repository
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force -Path "${{ steps.define_inputs.outputs.brmFolderPath }}"

      - name: Push changes to feature branch
        shell: pwsh
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@gtest.com"
          git add .
          git commit -m "Add module ${{ steps.define_inputs.outputs.module_name }} version ${{ steps.define_inputs.outputs.version }}"
          git push origin "${{ steps.define_inputs.outputs.branch_name }}"
